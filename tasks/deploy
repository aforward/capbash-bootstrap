#!/bin/bash
[[ -z "$INFO_LEVEL" ]] && source ./submodules/bootstrap/logging
. ./submodules/bootstrap/env

set -euo pipefail ; IFS=$'\n\t'

TARGET=${1} # the ip of the server
NODE=${2-helloworld}

if [[ -z "$2" ]]; then
  if [[ -e ./nodes/default ]]; then
    NODE=default
  fi
fi

if [ -z "$TARGET" ]; then
  notify "USAGE: capbash deploy <Target IP/host> <user>"
  notify "   eg: capbash deploy my-server.localnet"
  exit 0
fi

if [ "$TARGET" == "local" ] || [ "$TARGET" == "local" ]; then
  notify "Deploying $NODE locally ..."
  ./nodes/$NODE
else
  USER=${3-root}
  GROUP=${4-$USER}
  REMOTE_DIR=${REMOTE_DIR-/var/capbash} # where to save on the remote server
  SSH_LOGLEVEL=${SSH_LOGLEVEL-1}
  AUTHORIZED_KEYS_FILENAME=./assets/${USER}_authorized_keys

  if [ ! -f $AUTHORIZED_KEYS_FILENAME ]; then
    mkdir -p ./assets
    pubkey_file=$HOME/.ssh/id_dsa.pub
    if [ ! -f $pubkey_file ]; then
      notify "Please put your public key in $AUTHORIZED_KEYS_FILENAME file"
      exit 0
    else
      debug "Copying your public key ($pubkey_file) to $AUTHORIZED_KEYS_FILENAME"
      cp $pubkey_file $AUTHORIZED_KEYS_FILENAME
    fi
  fi

  debug "Uploading Authorized Keys For Bootstrap..."
  ssh $USER@$TARGET 'mkdir -p ~/.ssh' > /dev/null
  scp $AUTHORIZED_KEYS_FILENAME $USER@$TARGET:~/.ssh/authorized_keys > /dev/null
  (cd ./submodules/bootstrap && bundle exec cap capbash:deploy TARGET=$TARGET NODE=$NODE USER=$USER GROUP=$GROUP REMOTE_DIR=$REMOTE_DIR)
fi



